/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type PackRequestBodyTags = {
  dataType: Array<string>;
  domain: Array<string>;
  streamtags: Array<string>;
  technology: Array<string>;
};

export type PackRequestBody = {
  allowCustomFunctions?: boolean | undefined;
  author?: string | undefined;
  description?: string | undefined;
  displayName?: string | undefined;
  exports?: Array<string> | undefined;
  force?: boolean | undefined;
  id: string;
  inputs?: number | undefined;
  minLogStreamVersion?: string | undefined;
  outputs?: number | undefined;
  source: string;
  spec?: string | undefined;
  tags?: PackRequestBodyTags | undefined;
  version?: string | undefined;
};

/** @internal */
export const PackRequestBodyTags$inboundSchema: z.ZodType<
  PackRequestBodyTags,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataType: z.array(z.string()),
  domain: z.array(z.string()),
  streamtags: z.array(z.string()),
  technology: z.array(z.string()),
});

/** @internal */
export type PackRequestBodyTags$Outbound = {
  dataType: Array<string>;
  domain: Array<string>;
  streamtags: Array<string>;
  technology: Array<string>;
};

/** @internal */
export const PackRequestBodyTags$outboundSchema: z.ZodType<
  PackRequestBodyTags$Outbound,
  z.ZodTypeDef,
  PackRequestBodyTags
> = z.object({
  dataType: z.array(z.string()),
  domain: z.array(z.string()),
  streamtags: z.array(z.string()),
  technology: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PackRequestBodyTags$ {
  /** @deprecated use `PackRequestBodyTags$inboundSchema` instead. */
  export const inboundSchema = PackRequestBodyTags$inboundSchema;
  /** @deprecated use `PackRequestBodyTags$outboundSchema` instead. */
  export const outboundSchema = PackRequestBodyTags$outboundSchema;
  /** @deprecated use `PackRequestBodyTags$Outbound` instead. */
  export type Outbound = PackRequestBodyTags$Outbound;
}

export function packRequestBodyTagsToJSON(
  packRequestBodyTags: PackRequestBodyTags,
): string {
  return JSON.stringify(
    PackRequestBodyTags$outboundSchema.parse(packRequestBodyTags),
  );
}

export function packRequestBodyTagsFromJSON(
  jsonString: string,
): SafeParseResult<PackRequestBodyTags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PackRequestBodyTags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PackRequestBodyTags' from JSON`,
  );
}

/** @internal */
export const PackRequestBody$inboundSchema: z.ZodType<
  PackRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowCustomFunctions: z.boolean().optional(),
  author: z.string().optional(),
  description: z.string().optional(),
  displayName: z.string().optional(),
  exports: z.array(z.string()).optional(),
  force: z.boolean().optional(),
  id: z.string(),
  inputs: z.number().optional(),
  minLogStreamVersion: z.string().optional(),
  outputs: z.number().optional(),
  source: z.string(),
  spec: z.string().optional(),
  tags: z.lazy(() => PackRequestBodyTags$inboundSchema).optional(),
  version: z.string().optional(),
});

/** @internal */
export type PackRequestBody$Outbound = {
  allowCustomFunctions?: boolean | undefined;
  author?: string | undefined;
  description?: string | undefined;
  displayName?: string | undefined;
  exports?: Array<string> | undefined;
  force?: boolean | undefined;
  id: string;
  inputs?: number | undefined;
  minLogStreamVersion?: string | undefined;
  outputs?: number | undefined;
  source: string;
  spec?: string | undefined;
  tags?: PackRequestBodyTags$Outbound | undefined;
  version?: string | undefined;
};

/** @internal */
export const PackRequestBody$outboundSchema: z.ZodType<
  PackRequestBody$Outbound,
  z.ZodTypeDef,
  PackRequestBody
> = z.object({
  allowCustomFunctions: z.boolean().optional(),
  author: z.string().optional(),
  description: z.string().optional(),
  displayName: z.string().optional(),
  exports: z.array(z.string()).optional(),
  force: z.boolean().optional(),
  id: z.string(),
  inputs: z.number().optional(),
  minLogStreamVersion: z.string().optional(),
  outputs: z.number().optional(),
  source: z.string(),
  spec: z.string().optional(),
  tags: z.lazy(() => PackRequestBodyTags$outboundSchema).optional(),
  version: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PackRequestBody$ {
  /** @deprecated use `PackRequestBody$inboundSchema` instead. */
  export const inboundSchema = PackRequestBody$inboundSchema;
  /** @deprecated use `PackRequestBody$outboundSchema` instead. */
  export const outboundSchema = PackRequestBody$outboundSchema;
  /** @deprecated use `PackRequestBody$Outbound` instead. */
  export type Outbound = PackRequestBody$Outbound;
}

export function packRequestBodyToJSON(
  packRequestBody: PackRequestBody,
): string {
  return JSON.stringify(PackRequestBody$outboundSchema.parse(packRequestBody));
}

export function packRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PackRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PackRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PackRequestBody' from JSON`,
  );
}
