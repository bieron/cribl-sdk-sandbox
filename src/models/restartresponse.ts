/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const RestartResponseStatus = {
  Error: "Error",
  Restarting: "Restarting",
} as const;
export type RestartResponseStatus = ClosedEnum<typeof RestartResponseStatus>;

export type RestartResponse = {
  id: string;
  message?: string | undefined;
  status: RestartResponseStatus;
};

/** @internal */
export const RestartResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof RestartResponseStatus
> = z.nativeEnum(RestartResponseStatus);

/** @internal */
export const RestartResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof RestartResponseStatus
> = RestartResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RestartResponseStatus$ {
  /** @deprecated use `RestartResponseStatus$inboundSchema` instead. */
  export const inboundSchema = RestartResponseStatus$inboundSchema;
  /** @deprecated use `RestartResponseStatus$outboundSchema` instead. */
  export const outboundSchema = RestartResponseStatus$outboundSchema;
}

/** @internal */
export const RestartResponse$inboundSchema: z.ZodType<
  RestartResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  message: z.string().optional(),
  status: RestartResponseStatus$inboundSchema,
});

/** @internal */
export type RestartResponse$Outbound = {
  id: string;
  message?: string | undefined;
  status: string;
};

/** @internal */
export const RestartResponse$outboundSchema: z.ZodType<
  RestartResponse$Outbound,
  z.ZodTypeDef,
  RestartResponse
> = z.object({
  id: z.string(),
  message: z.string().optional(),
  status: RestartResponseStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RestartResponse$ {
  /** @deprecated use `RestartResponse$inboundSchema` instead. */
  export const inboundSchema = RestartResponse$inboundSchema;
  /** @deprecated use `RestartResponse$outboundSchema` instead. */
  export const outboundSchema = RestartResponse$outboundSchema;
  /** @deprecated use `RestartResponse$Outbound` instead. */
  export type Outbound = RestartResponse$Outbound;
}

export function restartResponseToJSON(
  restartResponse: RestartResponse,
): string {
  return JSON.stringify(RestartResponse$outboundSchema.parse(restartResponse));
}

export function restartResponseFromJSON(
  jsonString: string,
): SafeParseResult<RestartResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RestartResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RestartResponse' from JSON`,
  );
}
