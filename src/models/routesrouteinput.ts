/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type RoutesRouteInput = {
  name: string;
  /**
   * Disable this routing rule
   */
  disabled?: boolean | undefined;
  /**
   * JavaScript expression to select data to route
   */
  filter?: string | undefined;
  /**
   * Pipeline to send the matching data to
   */
  pipeline: string;
  /**
   * Enable to use a JavaScript expression that evaluates to the name of the Description below
   */
  enableOutputExpression?: boolean | undefined;
  output?: any | undefined;
  outputExpression?: any | undefined;
  description?: string | undefined;
  /**
   * Flag to control whether the event gets consumed by this Route (Final), or cloned into it
   */
  final?: boolean | undefined;
  additionalProperties?: { [k: string]: any };
};

/** @internal */
export const RoutesRouteInput$inboundSchema: z.ZodType<
  RoutesRouteInput,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    name: z.string(),
    disabled: z.boolean().optional(),
    filter: z.string().default("true"),
    pipeline: z.string(),
    enableOutputExpression: z.boolean().default(false),
    output: z.any().optional(),
    outputExpression: z.any().optional(),
    description: z.string().optional(),
    final: z.boolean().default(true),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type RoutesRouteInput$Outbound = {
  name: string;
  disabled?: boolean | undefined;
  filter: string;
  pipeline: string;
  enableOutputExpression: boolean;
  output?: any | undefined;
  outputExpression?: any | undefined;
  description?: string | undefined;
  final: boolean;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const RoutesRouteInput$outboundSchema: z.ZodType<
  RoutesRouteInput$Outbound,
  z.ZodTypeDef,
  RoutesRouteInput
> = z.object({
  name: z.string(),
  disabled: z.boolean().optional(),
  filter: z.string().default("true"),
  pipeline: z.string(),
  enableOutputExpression: z.boolean().default(false),
  output: z.any().optional(),
  outputExpression: z.any().optional(),
  description: z.string().optional(),
  final: z.boolean().default(true),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoutesRouteInput$ {
  /** @deprecated use `RoutesRouteInput$inboundSchema` instead. */
  export const inboundSchema = RoutesRouteInput$inboundSchema;
  /** @deprecated use `RoutesRouteInput$outboundSchema` instead. */
  export const outboundSchema = RoutesRouteInput$outboundSchema;
  /** @deprecated use `RoutesRouteInput$Outbound` instead. */
  export type Outbound = RoutesRouteInput$Outbound;
}

export function routesRouteInputToJSON(
  routesRouteInput: RoutesRouteInput,
): string {
  return JSON.stringify(
    RoutesRouteInput$outboundSchema.parse(routesRouteInput),
  );
}

export function routesRouteInputFromJSON(
  jsonString: string,
): SafeParseResult<RoutesRouteInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RoutesRouteInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RoutesRouteInput' from JSON`,
  );
}
