/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  RoutesRoute,
  RoutesRoute$inboundSchema,
  RoutesRoute$Outbound,
  RoutesRoute$outboundSchema,
} from "./routesroute.js";
import {
  RoutesRouteInput,
  RoutesRouteInput$inboundSchema,
  RoutesRouteInput$Outbound,
  RoutesRouteInput$outboundSchema,
} from "./routesrouteinput.js";

export type Groups = {
  name: string;
  /**
   * Short description of this group
   */
  description?: string | undefined;
  /**
   * Whether this group is disabled
   */
  disabled?: boolean | undefined;
};

export type Comment = {
  /**
   * Optional, short description of this Route's purpose
   */
  comment?: string | undefined;
  additionalProperties?: { [k: string]: any };
};

export type Routes = {
  /**
   * Routes ID
   */
  id?: string | undefined;
  /**
   * Pipeline routing rules
   */
  routes: Array<RoutesRoute>;
  groups?: { [k: string]: Groups } | undefined;
  /**
   * Comments
   */
  comments?: Array<Comment> | undefined;
};

export type RoutesInput = {
  /**
   * Routes ID
   */
  id?: string | undefined;
  /**
   * Pipeline routing rules
   */
  routes: Array<RoutesRouteInput>;
  groups?: { [k: string]: Groups } | undefined;
  /**
   * Comments
   */
  comments?: Array<Comment> | undefined;
};

/** @internal */
export const Groups$inboundSchema: z.ZodType<Groups, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    description: z.string().optional(),
    disabled: z.boolean().optional(),
  });

/** @internal */
export type Groups$Outbound = {
  name: string;
  description?: string | undefined;
  disabled?: boolean | undefined;
};

/** @internal */
export const Groups$outboundSchema: z.ZodType<
  Groups$Outbound,
  z.ZodTypeDef,
  Groups
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  disabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Groups$ {
  /** @deprecated use `Groups$inboundSchema` instead. */
  export const inboundSchema = Groups$inboundSchema;
  /** @deprecated use `Groups$outboundSchema` instead. */
  export const outboundSchema = Groups$outboundSchema;
  /** @deprecated use `Groups$Outbound` instead. */
  export type Outbound = Groups$Outbound;
}

export function groupsToJSON(groups: Groups): string {
  return JSON.stringify(Groups$outboundSchema.parse(groups));
}

export function groupsFromJSON(
  jsonString: string,
): SafeParseResult<Groups, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Groups$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Groups' from JSON`,
  );
}

/** @internal */
export const Comment$inboundSchema: z.ZodType<Comment, z.ZodTypeDef, unknown> =
  collectExtraKeys$(
    z.object({
      comment: z.string().optional(),
    }).catchall(z.any()),
    "additionalProperties",
    true,
  );

/** @internal */
export type Comment$Outbound = {
  comment?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const Comment$outboundSchema: z.ZodType<
  Comment$Outbound,
  z.ZodTypeDef,
  Comment
> = z.object({
  comment: z.string().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Comment$ {
  /** @deprecated use `Comment$inboundSchema` instead. */
  export const inboundSchema = Comment$inboundSchema;
  /** @deprecated use `Comment$outboundSchema` instead. */
  export const outboundSchema = Comment$outboundSchema;
  /** @deprecated use `Comment$Outbound` instead. */
  export type Outbound = Comment$Outbound;
}

export function commentToJSON(comment: Comment): string {
  return JSON.stringify(Comment$outboundSchema.parse(comment));
}

export function commentFromJSON(
  jsonString: string,
): SafeParseResult<Comment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Comment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Comment' from JSON`,
  );
}

/** @internal */
export const Routes$inboundSchema: z.ZodType<Routes, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    routes: z.array(RoutesRoute$inboundSchema),
    groups: z.record(z.lazy(() => Groups$inboundSchema)).optional(),
    comments: z.array(z.lazy(() => Comment$inboundSchema)).optional(),
  });

/** @internal */
export type Routes$Outbound = {
  id?: string | undefined;
  routes: Array<RoutesRoute$Outbound>;
  groups?: { [k: string]: Groups$Outbound } | undefined;
  comments?: Array<Comment$Outbound> | undefined;
};

/** @internal */
export const Routes$outboundSchema: z.ZodType<
  Routes$Outbound,
  z.ZodTypeDef,
  Routes
> = z.object({
  id: z.string().optional(),
  routes: z.array(RoutesRoute$outboundSchema),
  groups: z.record(z.lazy(() => Groups$outboundSchema)).optional(),
  comments: z.array(z.lazy(() => Comment$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Routes$ {
  /** @deprecated use `Routes$inboundSchema` instead. */
  export const inboundSchema = Routes$inboundSchema;
  /** @deprecated use `Routes$outboundSchema` instead. */
  export const outboundSchema = Routes$outboundSchema;
  /** @deprecated use `Routes$Outbound` instead. */
  export type Outbound = Routes$Outbound;
}

export function routesToJSON(routes: Routes): string {
  return JSON.stringify(Routes$outboundSchema.parse(routes));
}

export function routesFromJSON(
  jsonString: string,
): SafeParseResult<Routes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Routes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Routes' from JSON`,
  );
}

/** @internal */
export const RoutesInput$inboundSchema: z.ZodType<
  RoutesInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  routes: z.array(RoutesRouteInput$inboundSchema),
  groups: z.record(z.lazy(() => Groups$inboundSchema)).optional(),
  comments: z.array(z.lazy(() => Comment$inboundSchema)).optional(),
});

/** @internal */
export type RoutesInput$Outbound = {
  id?: string | undefined;
  routes: Array<RoutesRouteInput$Outbound>;
  groups?: { [k: string]: Groups$Outbound } | undefined;
  comments?: Array<Comment$Outbound> | undefined;
};

/** @internal */
export const RoutesInput$outboundSchema: z.ZodType<
  RoutesInput$Outbound,
  z.ZodTypeDef,
  RoutesInput
> = z.object({
  id: z.string().optional(),
  routes: z.array(RoutesRouteInput$outboundSchema),
  groups: z.record(z.lazy(() => Groups$outboundSchema)).optional(),
  comments: z.array(z.lazy(() => Comment$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoutesInput$ {
  /** @deprecated use `RoutesInput$inboundSchema` instead. */
  export const inboundSchema = RoutesInput$inboundSchema;
  /** @deprecated use `RoutesInput$outboundSchema` instead. */
  export const outboundSchema = RoutesInput$outboundSchema;
  /** @deprecated use `RoutesInput$Outbound` instead. */
  export type Outbound = RoutesInput$Outbound;
}

export function routesInputToJSON(routesInput: RoutesInput): string {
  return JSON.stringify(RoutesInput$outboundSchema.parse(routesInput));
}

export function routesInputFromJSON(
  jsonString: string,
): SafeParseResult<RoutesInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RoutesInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RoutesInput' from JSON`,
  );
}
