/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateGroupsByIdRequest = {
  /**
   * Group ID
   */
  id: string;
  /**
   * ConfigGroup object
   */
  configGroup: models.ConfigGroup;
};

/**
 * a list of ConfigGroup objects
 */
export type UpdateGroupsByIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.ConfigGroup> | undefined;
};

/** @internal */
export const UpdateGroupsByIdRequest$inboundSchema: z.ZodType<
  UpdateGroupsByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  ConfigGroup: models.ConfigGroup$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ConfigGroup": "configGroup",
  });
});

/** @internal */
export type UpdateGroupsByIdRequest$Outbound = {
  id: string;
  ConfigGroup: models.ConfigGroup$Outbound;
};

/** @internal */
export const UpdateGroupsByIdRequest$outboundSchema: z.ZodType<
  UpdateGroupsByIdRequest$Outbound,
  z.ZodTypeDef,
  UpdateGroupsByIdRequest
> = z.object({
  id: z.string(),
  configGroup: models.ConfigGroup$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    configGroup: "ConfigGroup",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGroupsByIdRequest$ {
  /** @deprecated use `UpdateGroupsByIdRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateGroupsByIdRequest$inboundSchema;
  /** @deprecated use `UpdateGroupsByIdRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateGroupsByIdRequest$outboundSchema;
  /** @deprecated use `UpdateGroupsByIdRequest$Outbound` instead. */
  export type Outbound = UpdateGroupsByIdRequest$Outbound;
}

export function updateGroupsByIdRequestToJSON(
  updateGroupsByIdRequest: UpdateGroupsByIdRequest,
): string {
  return JSON.stringify(
    UpdateGroupsByIdRequest$outboundSchema.parse(updateGroupsByIdRequest),
  );
}

export function updateGroupsByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGroupsByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGroupsByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGroupsByIdRequest' from JSON`,
  );
}

/** @internal */
export const UpdateGroupsByIdResponse$inboundSchema: z.ZodType<
  UpdateGroupsByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.ConfigGroup$inboundSchema).optional(),
});

/** @internal */
export type UpdateGroupsByIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.ConfigGroup$Outbound> | undefined;
};

/** @internal */
export const UpdateGroupsByIdResponse$outboundSchema: z.ZodType<
  UpdateGroupsByIdResponse$Outbound,
  z.ZodTypeDef,
  UpdateGroupsByIdResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.ConfigGroup$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGroupsByIdResponse$ {
  /** @deprecated use `UpdateGroupsByIdResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateGroupsByIdResponse$inboundSchema;
  /** @deprecated use `UpdateGroupsByIdResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateGroupsByIdResponse$outboundSchema;
  /** @deprecated use `UpdateGroupsByIdResponse$Outbound` instead. */
  export type Outbound = UpdateGroupsByIdResponse$Outbound;
}

export function updateGroupsByIdResponseToJSON(
  updateGroupsByIdResponse: UpdateGroupsByIdResponse,
): string {
  return JSON.stringify(
    UpdateGroupsByIdResponse$outboundSchema.parse(updateGroupsByIdResponse),
  );
}

export function updateGroupsByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGroupsByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGroupsByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGroupsByIdResponse' from JSON`,
  );
}
