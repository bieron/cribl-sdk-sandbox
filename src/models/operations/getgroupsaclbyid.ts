/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * resource type by which to filter access levels
 */
export const GetGroupsAclByIdType = {
  Groups: "groups",
  Datasets: "datasets",
  DatasetProviders: "dataset-providers",
  Projects: "projects",
  Dashboards: "dashboards",
  Macros: "macros",
  Notebooks: "notebooks",
  Insights: "insights",
} as const;
/**
 * resource type by which to filter access levels
 */
export type GetGroupsAclByIdType = ClosedEnum<typeof GetGroupsAclByIdType>;

export type GetGroupsAclByIdRequest = {
  /**
   * Group id
   */
  id: string;
  /**
   * resource type by which to filter access levels
   */
  type?: GetGroupsAclByIdType | undefined;
};

/**
 * a list of UserAccessControlList objects
 */
export type GetGroupsAclByIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.UserAccessControlList> | undefined;
};

/** @internal */
export const GetGroupsAclByIdType$inboundSchema: z.ZodNativeEnum<
  typeof GetGroupsAclByIdType
> = z.nativeEnum(GetGroupsAclByIdType);

/** @internal */
export const GetGroupsAclByIdType$outboundSchema: z.ZodNativeEnum<
  typeof GetGroupsAclByIdType
> = GetGroupsAclByIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetGroupsAclByIdType$ {
  /** @deprecated use `GetGroupsAclByIdType$inboundSchema` instead. */
  export const inboundSchema = GetGroupsAclByIdType$inboundSchema;
  /** @deprecated use `GetGroupsAclByIdType$outboundSchema` instead. */
  export const outboundSchema = GetGroupsAclByIdType$outboundSchema;
}

/** @internal */
export const GetGroupsAclByIdRequest$inboundSchema: z.ZodType<
  GetGroupsAclByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: GetGroupsAclByIdType$inboundSchema.optional(),
});

/** @internal */
export type GetGroupsAclByIdRequest$Outbound = {
  id: string;
  type?: string | undefined;
};

/** @internal */
export const GetGroupsAclByIdRequest$outboundSchema: z.ZodType<
  GetGroupsAclByIdRequest$Outbound,
  z.ZodTypeDef,
  GetGroupsAclByIdRequest
> = z.object({
  id: z.string(),
  type: GetGroupsAclByIdType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetGroupsAclByIdRequest$ {
  /** @deprecated use `GetGroupsAclByIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetGroupsAclByIdRequest$inboundSchema;
  /** @deprecated use `GetGroupsAclByIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetGroupsAclByIdRequest$outboundSchema;
  /** @deprecated use `GetGroupsAclByIdRequest$Outbound` instead. */
  export type Outbound = GetGroupsAclByIdRequest$Outbound;
}

export function getGroupsAclByIdRequestToJSON(
  getGroupsAclByIdRequest: GetGroupsAclByIdRequest,
): string {
  return JSON.stringify(
    GetGroupsAclByIdRequest$outboundSchema.parse(getGroupsAclByIdRequest),
  );
}

export function getGroupsAclByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetGroupsAclByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetGroupsAclByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetGroupsAclByIdRequest' from JSON`,
  );
}

/** @internal */
export const GetGroupsAclByIdResponse$inboundSchema: z.ZodType<
  GetGroupsAclByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.UserAccessControlList$inboundSchema).optional(),
});

/** @internal */
export type GetGroupsAclByIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.UserAccessControlList$Outbound> | undefined;
};

/** @internal */
export const GetGroupsAclByIdResponse$outboundSchema: z.ZodType<
  GetGroupsAclByIdResponse$Outbound,
  z.ZodTypeDef,
  GetGroupsAclByIdResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.UserAccessControlList$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetGroupsAclByIdResponse$ {
  /** @deprecated use `GetGroupsAclByIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetGroupsAclByIdResponse$inboundSchema;
  /** @deprecated use `GetGroupsAclByIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetGroupsAclByIdResponse$outboundSchema;
  /** @deprecated use `GetGroupsAclByIdResponse$Outbound` instead. */
  export type Outbound = GetGroupsAclByIdResponse$Outbound;
}

export function getGroupsAclByIdResponseToJSON(
  getGroupsAclByIdResponse: GetGroupsAclByIdResponse,
): string {
  return JSON.stringify(
    GetGroupsAclByIdResponse$outboundSchema.parse(getGroupsAclByIdResponse),
  );
}

export function getGroupsAclByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetGroupsAclByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetGroupsAclByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetGroupsAclByIdResponse' from JSON`,
  );
}
