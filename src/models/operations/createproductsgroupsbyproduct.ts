/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Cribl Product
 */
export const CreateProductsGroupsByProductProduct = {
  Stream: "stream",
  Edge: "edge",
} as const;
/**
 * Cribl Product
 */
export type CreateProductsGroupsByProductProduct = ClosedEnum<
  typeof CreateProductsGroupsByProductProduct
>;

export type CreateProductsGroupsByProductRequest = {
  /**
   * Cribl Product
   */
  product: CreateProductsGroupsByProductProduct;
  /**
   * ConfigGroup object
   */
  configGroup: models.ConfigGroup;
};

/**
 * a list of ConfigGroup objects
 */
export type CreateProductsGroupsByProductResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.ConfigGroup> | undefined;
};

/** @internal */
export const CreateProductsGroupsByProductProduct$inboundSchema:
  z.ZodNativeEnum<typeof CreateProductsGroupsByProductProduct> = z.nativeEnum(
    CreateProductsGroupsByProductProduct,
  );

/** @internal */
export const CreateProductsGroupsByProductProduct$outboundSchema:
  z.ZodNativeEnum<typeof CreateProductsGroupsByProductProduct> =
    CreateProductsGroupsByProductProduct$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProductsGroupsByProductProduct$ {
  /** @deprecated use `CreateProductsGroupsByProductProduct$inboundSchema` instead. */
  export const inboundSchema =
    CreateProductsGroupsByProductProduct$inboundSchema;
  /** @deprecated use `CreateProductsGroupsByProductProduct$outboundSchema` instead. */
  export const outboundSchema =
    CreateProductsGroupsByProductProduct$outboundSchema;
}

/** @internal */
export const CreateProductsGroupsByProductRequest$inboundSchema: z.ZodType<
  CreateProductsGroupsByProductRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  product: CreateProductsGroupsByProductProduct$inboundSchema,
  ConfigGroup: models.ConfigGroup$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ConfigGroup": "configGroup",
  });
});

/** @internal */
export type CreateProductsGroupsByProductRequest$Outbound = {
  product: string;
  ConfigGroup: models.ConfigGroup$Outbound;
};

/** @internal */
export const CreateProductsGroupsByProductRequest$outboundSchema: z.ZodType<
  CreateProductsGroupsByProductRequest$Outbound,
  z.ZodTypeDef,
  CreateProductsGroupsByProductRequest
> = z.object({
  product: CreateProductsGroupsByProductProduct$outboundSchema,
  configGroup: models.ConfigGroup$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    configGroup: "ConfigGroup",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProductsGroupsByProductRequest$ {
  /** @deprecated use `CreateProductsGroupsByProductRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateProductsGroupsByProductRequest$inboundSchema;
  /** @deprecated use `CreateProductsGroupsByProductRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateProductsGroupsByProductRequest$outboundSchema;
  /** @deprecated use `CreateProductsGroupsByProductRequest$Outbound` instead. */
  export type Outbound = CreateProductsGroupsByProductRequest$Outbound;
}

export function createProductsGroupsByProductRequestToJSON(
  createProductsGroupsByProductRequest: CreateProductsGroupsByProductRequest,
): string {
  return JSON.stringify(
    CreateProductsGroupsByProductRequest$outboundSchema.parse(
      createProductsGroupsByProductRequest,
    ),
  );
}

export function createProductsGroupsByProductRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateProductsGroupsByProductRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProductsGroupsByProductRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProductsGroupsByProductRequest' from JSON`,
  );
}

/** @internal */
export const CreateProductsGroupsByProductResponse$inboundSchema: z.ZodType<
  CreateProductsGroupsByProductResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.ConfigGroup$inboundSchema).optional(),
});

/** @internal */
export type CreateProductsGroupsByProductResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.ConfigGroup$Outbound> | undefined;
};

/** @internal */
export const CreateProductsGroupsByProductResponse$outboundSchema: z.ZodType<
  CreateProductsGroupsByProductResponse$Outbound,
  z.ZodTypeDef,
  CreateProductsGroupsByProductResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.ConfigGroup$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProductsGroupsByProductResponse$ {
  /** @deprecated use `CreateProductsGroupsByProductResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateProductsGroupsByProductResponse$inboundSchema;
  /** @deprecated use `CreateProductsGroupsByProductResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateProductsGroupsByProductResponse$outboundSchema;
  /** @deprecated use `CreateProductsGroupsByProductResponse$Outbound` instead. */
  export type Outbound = CreateProductsGroupsByProductResponse$Outbound;
}

export function createProductsGroupsByProductResponseToJSON(
  createProductsGroupsByProductResponse: CreateProductsGroupsByProductResponse,
): string {
  return JSON.stringify(
    CreateProductsGroupsByProductResponse$outboundSchema.parse(
      createProductsGroupsByProductResponse,
    ),
  );
}

export function createProductsGroupsByProductResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateProductsGroupsByProductResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProductsGroupsByProductResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProductsGroupsByProductResponse' from JSON`,
  );
}
