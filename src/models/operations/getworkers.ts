/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetWorkersRequest = {
  /**
   * Filter expression evaluated against nodes
   */
  filterExp?: string | undefined;
  /**
   * Sorting object (JSON stringified) expression evaluated against nodes
   */
  sort?: string | undefined;
  /**
   * Sorting expression evaluated against nodes
   */
  sortExp?: string | undefined;
  /**
   * Maximum number of nodes to return
   */
  limit?: number | undefined;
  /**
   * Pagination offset
   */
  offset?: number | undefined;
  /**
   * Filter object (JSON stringified) to select nodes
   */
  filter?: string | undefined;
};

/**
 * a list of MasterWorkerEntry objects
 */
export type GetWorkersResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.MasterWorkerEntry> | undefined;
};

/** @internal */
export const GetWorkersRequest$inboundSchema: z.ZodType<
  GetWorkersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filterExp: z.string().optional(),
  sort: z.string().optional(),
  sortExp: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  filter: z.string().optional(),
});

/** @internal */
export type GetWorkersRequest$Outbound = {
  filterExp?: string | undefined;
  sort?: string | undefined;
  sortExp?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  filter?: string | undefined;
};

/** @internal */
export const GetWorkersRequest$outboundSchema: z.ZodType<
  GetWorkersRequest$Outbound,
  z.ZodTypeDef,
  GetWorkersRequest
> = z.object({
  filterExp: z.string().optional(),
  sort: z.string().optional(),
  sortExp: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  filter: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkersRequest$ {
  /** @deprecated use `GetWorkersRequest$inboundSchema` instead. */
  export const inboundSchema = GetWorkersRequest$inboundSchema;
  /** @deprecated use `GetWorkersRequest$outboundSchema` instead. */
  export const outboundSchema = GetWorkersRequest$outboundSchema;
  /** @deprecated use `GetWorkersRequest$Outbound` instead. */
  export type Outbound = GetWorkersRequest$Outbound;
}

export function getWorkersRequestToJSON(
  getWorkersRequest: GetWorkersRequest,
): string {
  return JSON.stringify(
    GetWorkersRequest$outboundSchema.parse(getWorkersRequest),
  );
}

export function getWorkersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkersRequest' from JSON`,
  );
}

/** @internal */
export const GetWorkersResponse$inboundSchema: z.ZodType<
  GetWorkersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.MasterWorkerEntry$inboundSchema).optional(),
});

/** @internal */
export type GetWorkersResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.MasterWorkerEntry$Outbound> | undefined;
};

/** @internal */
export const GetWorkersResponse$outboundSchema: z.ZodType<
  GetWorkersResponse$Outbound,
  z.ZodTypeDef,
  GetWorkersResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.MasterWorkerEntry$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkersResponse$ {
  /** @deprecated use `GetWorkersResponse$inboundSchema` instead. */
  export const inboundSchema = GetWorkersResponse$inboundSchema;
  /** @deprecated use `GetWorkersResponse$outboundSchema` instead. */
  export const outboundSchema = GetWorkersResponse$outboundSchema;
  /** @deprecated use `GetWorkersResponse$Outbound` instead. */
  export type Outbound = GetWorkersResponse$Outbound;
}

export function getWorkersResponseToJSON(
  getWorkersResponse: GetWorkersResponse,
): string {
  return JSON.stringify(
    GetWorkersResponse$outboundSchema.parse(getWorkersResponse),
  );
}

export function getWorkersResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkersResponse' from JSON`,
  );
}
