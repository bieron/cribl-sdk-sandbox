/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Cribl Product
 */
export const GetProductsGroupsByProductProduct = {
  Stream: "stream",
  Edge: "edge",
} as const;
/**
 * Cribl Product
 */
export type GetProductsGroupsByProductProduct = ClosedEnum<
  typeof GetProductsGroupsByProductProduct
>;

export type GetProductsGroupsByProductRequest = {
  /**
   * fields to add to results: git.commit, git.localChanges, git.log
   */
  fields?: string | undefined;
  /**
   * Cribl Product
   */
  product: GetProductsGroupsByProductProduct;
};

/**
 * a list of ConfigGroup objects
 */
export type GetProductsGroupsByProductResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.ConfigGroup> | undefined;
};

/** @internal */
export const GetProductsGroupsByProductProduct$inboundSchema: z.ZodNativeEnum<
  typeof GetProductsGroupsByProductProduct
> = z.nativeEnum(GetProductsGroupsByProductProduct);

/** @internal */
export const GetProductsGroupsByProductProduct$outboundSchema: z.ZodNativeEnum<
  typeof GetProductsGroupsByProductProduct
> = GetProductsGroupsByProductProduct$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProductsGroupsByProductProduct$ {
  /** @deprecated use `GetProductsGroupsByProductProduct$inboundSchema` instead. */
  export const inboundSchema = GetProductsGroupsByProductProduct$inboundSchema;
  /** @deprecated use `GetProductsGroupsByProductProduct$outboundSchema` instead. */
  export const outboundSchema =
    GetProductsGroupsByProductProduct$outboundSchema;
}

/** @internal */
export const GetProductsGroupsByProductRequest$inboundSchema: z.ZodType<
  GetProductsGroupsByProductRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.string().optional(),
  product: GetProductsGroupsByProductProduct$inboundSchema,
});

/** @internal */
export type GetProductsGroupsByProductRequest$Outbound = {
  fields?: string | undefined;
  product: string;
};

/** @internal */
export const GetProductsGroupsByProductRequest$outboundSchema: z.ZodType<
  GetProductsGroupsByProductRequest$Outbound,
  z.ZodTypeDef,
  GetProductsGroupsByProductRequest
> = z.object({
  fields: z.string().optional(),
  product: GetProductsGroupsByProductProduct$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProductsGroupsByProductRequest$ {
  /** @deprecated use `GetProductsGroupsByProductRequest$inboundSchema` instead. */
  export const inboundSchema = GetProductsGroupsByProductRequest$inboundSchema;
  /** @deprecated use `GetProductsGroupsByProductRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetProductsGroupsByProductRequest$outboundSchema;
  /** @deprecated use `GetProductsGroupsByProductRequest$Outbound` instead. */
  export type Outbound = GetProductsGroupsByProductRequest$Outbound;
}

export function getProductsGroupsByProductRequestToJSON(
  getProductsGroupsByProductRequest: GetProductsGroupsByProductRequest,
): string {
  return JSON.stringify(
    GetProductsGroupsByProductRequest$outboundSchema.parse(
      getProductsGroupsByProductRequest,
    ),
  );
}

export function getProductsGroupsByProductRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetProductsGroupsByProductRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProductsGroupsByProductRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProductsGroupsByProductRequest' from JSON`,
  );
}

/** @internal */
export const GetProductsGroupsByProductResponse$inboundSchema: z.ZodType<
  GetProductsGroupsByProductResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.ConfigGroup$inboundSchema).optional(),
});

/** @internal */
export type GetProductsGroupsByProductResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.ConfigGroup$Outbound> | undefined;
};

/** @internal */
export const GetProductsGroupsByProductResponse$outboundSchema: z.ZodType<
  GetProductsGroupsByProductResponse$Outbound,
  z.ZodTypeDef,
  GetProductsGroupsByProductResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.ConfigGroup$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProductsGroupsByProductResponse$ {
  /** @deprecated use `GetProductsGroupsByProductResponse$inboundSchema` instead. */
  export const inboundSchema = GetProductsGroupsByProductResponse$inboundSchema;
  /** @deprecated use `GetProductsGroupsByProductResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetProductsGroupsByProductResponse$outboundSchema;
  /** @deprecated use `GetProductsGroupsByProductResponse$Outbound` instead. */
  export type Outbound = GetProductsGroupsByProductResponse$Outbound;
}

export function getProductsGroupsByProductResponseToJSON(
  getProductsGroupsByProductResponse: GetProductsGroupsByProductResponse,
): string {
  return JSON.stringify(
    GetProductsGroupsByProductResponse$outboundSchema.parse(
      getProductsGroupsByProductResponse,
    ),
  );
}

export function getProductsGroupsByProductResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetProductsGroupsByProductResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetProductsGroupsByProductResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProductsGroupsByProductResponse' from JSON`,
  );
}
