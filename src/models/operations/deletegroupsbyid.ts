/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DeleteGroupsByIdRequest = {
  /**
   * Group ID
   */
  id: string;
};

/**
 * a list of ConfigGroup objects
 */
export type DeleteGroupsByIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.ConfigGroup> | undefined;
};

/** @internal */
export const DeleteGroupsByIdRequest$inboundSchema: z.ZodType<
  DeleteGroupsByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteGroupsByIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteGroupsByIdRequest$outboundSchema: z.ZodType<
  DeleteGroupsByIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteGroupsByIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteGroupsByIdRequest$ {
  /** @deprecated use `DeleteGroupsByIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteGroupsByIdRequest$inboundSchema;
  /** @deprecated use `DeleteGroupsByIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteGroupsByIdRequest$outboundSchema;
  /** @deprecated use `DeleteGroupsByIdRequest$Outbound` instead. */
  export type Outbound = DeleteGroupsByIdRequest$Outbound;
}

export function deleteGroupsByIdRequestToJSON(
  deleteGroupsByIdRequest: DeleteGroupsByIdRequest,
): string {
  return JSON.stringify(
    DeleteGroupsByIdRequest$outboundSchema.parse(deleteGroupsByIdRequest),
  );
}

export function deleteGroupsByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteGroupsByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteGroupsByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteGroupsByIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteGroupsByIdResponse$inboundSchema: z.ZodType<
  DeleteGroupsByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.ConfigGroup$inboundSchema).optional(),
});

/** @internal */
export type DeleteGroupsByIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.ConfigGroup$Outbound> | undefined;
};

/** @internal */
export const DeleteGroupsByIdResponse$outboundSchema: z.ZodType<
  DeleteGroupsByIdResponse$Outbound,
  z.ZodTypeDef,
  DeleteGroupsByIdResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.ConfigGroup$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteGroupsByIdResponse$ {
  /** @deprecated use `DeleteGroupsByIdResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteGroupsByIdResponse$inboundSchema;
  /** @deprecated use `DeleteGroupsByIdResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteGroupsByIdResponse$outboundSchema;
  /** @deprecated use `DeleteGroupsByIdResponse$Outbound` instead. */
  export type Outbound = DeleteGroupsByIdResponse$Outbound;
}

export function deleteGroupsByIdResponseToJSON(
  deleteGroupsByIdResponse: DeleteGroupsByIdResponse,
): string {
  return JSON.stringify(
    DeleteGroupsByIdResponse$outboundSchema.parse(deleteGroupsByIdResponse),
  );
}

export function deleteGroupsByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteGroupsByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteGroupsByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteGroupsByIdResponse' from JSON`,
  );
}
