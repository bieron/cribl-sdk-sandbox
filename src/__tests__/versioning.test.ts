/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { CriblControlPlane } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Versioning Get Version Branch", async () => {
  const testHttpClient = createTestHTTPClient("getVersionBranch");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.versioning.getVersionBranch();
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Versioning Create Version Commit", async () => {
  const testHttpClient = createTestHTTPClient("createVersionCommit");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.versioning.createVersionCommit({
    message: "<value>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Versioning Get Version Count", async () => {
  const testHttpClient = createTestHTTPClient("getVersionCount");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.versioning.getVersionCount();
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Versioning Get Version Current Branch", async () => {
  const testHttpClient = createTestHTTPClient("getVersionCurrentBranch");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.versioning.getVersionCurrentBranch();
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Versioning Get Version Diff", async () => {
  const testHttpClient = createTestHTTPClient("getVersionDiff");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.versioning.getVersionDiff();
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Versioning Get Version Files", async () => {
  const testHttpClient = createTestHTTPClient("getVersionFiles");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.versioning.getVersionFiles();
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Versioning Get Version Info", async () => {
  const testHttpClient = createTestHTTPClient("getVersionInfo");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.versioning.getVersionInfo();
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Versioning Create Version Push", async () => {
  const testHttpClient = createTestHTTPClient("createVersionPush");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.versioning.createVersionPush();
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Versioning Create Version Revert", async () => {
  const testHttpClient = createTestHTTPClient("createVersionRevert");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.versioning.createVersionRevert({
    gitRevertParams: {
      commit: "<value>",
      message: "<value>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Versioning Get Version Show", async () => {
  const testHttpClient = createTestHTTPClient("getVersionShow");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.versioning.getVersionShow();
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Versioning Get Version Status", async () => {
  const testHttpClient = createTestHTTPClient("getVersionStatus");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.versioning.getVersionStatus();
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Versioning Create Version Sync", async () => {
  const testHttpClient = createTestHTTPClient("createVersionSync");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.versioning.createVersionSync();
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Versioning Create Version Undo", async () => {
  const testHttpClient = createTestHTTPClient("createVersionUndo");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.versioning.createVersionUndo();
  expect(result).toBeDefined();
  expect(result).toEqual({});
});
