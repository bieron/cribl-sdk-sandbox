/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { CriblControlPlane } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Sources Test Inputs", async () => {
  const testHttpClient = createTestHTTPClient("testInputs");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    security: {
      bearerAuth: process.env["TEST_BEARER_TOKEN"] ?? "value",
    },
    httpClient: testHttpClient,
  });

  const listResult = await criblControlPlane.sources.listSource();
  expect(listResult).toBeDefined();

  const createResult = await criblControlPlane.sources.createSource({
    id: "inputOne",
    type: "exec",
    command: "echo hello",
  });
  expect(createResult).toBeDefined();
  expect(createResult?.count).toBeDefined();
  expect(createResult?.count).toEqual(1);
});

test("Sources Get Input By Id", async () => {
  const testHttpClient = createTestHTTPClient("getInputById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.sources.getSourceById({
    id: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Sources Update Input By Id", async () => {
  const testHttpClient = createTestHTTPClient("updateInputById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.sources.updateSourceById({
    id: "<id>",
    input: {
      id: "<id>",
      type: "kube_events",
      disabled: false,
      sendToRoutes: true,
      pqEnabled: false,
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Sources Delete Input By Id", async () => {
  const testHttpClient = createTestHTTPClient("deleteInputById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.sources.deleteSourceById({
    id: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Sources Create Input Hec Token By Id", async () => {
  const testHttpClient = createTestHTTPClient("createInputHecTokenById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.sources.createSourceHecTokenById({
    id: "<id>",
    addHecTokenRequest: {
      token: "<value>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Sources Update Input Hec Token By Id And Token", async () => {
  const testHttpClient = createTestHTTPClient(
    "updateInputHecTokenByIdAndToken",
  );

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.sources
    .updateSourceHecTokenByIdAndToken({
      id: "<id>",
      token: "<value>",
      updateHecTokenRequest: {},
    });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});
