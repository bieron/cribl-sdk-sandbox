/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { CriblControlPlane } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Destinations List Output", async () => {
  const testHttpClient = createTestHTTPClient("listOutput");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.destinations.listDestination();
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Destinations Create Output", async () => {
  const testHttpClient = createTestHTTPClient("createOutput");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.destinations.createDestination({
    id: "<id>",
    url: "https://probable-rationale.com/",
    index: "<value>",
    concurrency: 5,
    maxPayloadSizeKB: 4096,
    maxPayloadEvents: 0,
    compress: true,
    rejectUnauthorized: true,
    timeoutSec: 30,
    flushPeriodSec: 1,
    failedRequestLoggingMode: "none",
    includeDocId: true,
    responseHonorRetryAfterHeader: false,
    onBackpressure: "block",
    pqMaxFileSize: "1 MB",
    pqMaxSize: "5GB",
    pqPath: "$CRIBL_HOME/state/queues",
    pqCompress: "none",
    pqOnBackpressure: "block",
    pqMode: "error",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Destinations Get Output By Id", async () => {
  const testHttpClient = createTestHTTPClient("getOutputById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.destinations.getDestinationById({
    id: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Destinations Update Output By Id", async () => {
  const testHttpClient = createTestHTTPClient("updateOutputById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.destinations.updateDestinationById({
    id: "<id>",
    output: {
      type: "signalfx",
      authType: "manual",
      realm: "us0",
      concurrency: 5,
      maxPayloadSizeKB: 4096,
      maxPayloadEvents: 0,
      compress: true,
      rejectUnauthorized: true,
      timeoutSec: 30,
      flushPeriodSec: 1,
      useRoundRobinDns: false,
      failedRequestLoggingMode: "none",
      responseHonorRetryAfterHeader: false,
      onBackpressure: "block",
      pqMaxFileSize: "1 MB",
      pqMaxSize: "5GB",
      pqPath: "$CRIBL_HOME/state/queues",
      pqCompress: "none",
      pqOnBackpressure: "block",
      pqMode: "error",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Destinations Delete Output By Id", async () => {
  const testHttpClient = createTestHTTPClient("deleteOutputById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.destinations.deleteDestinationById({
    id: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Destinations Delete Output Pq By Id", async () => {
  const testHttpClient = createTestHTTPClient("deleteOutputPqById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.destinations.deleteDestinationPqById({
    id: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Destinations Get Output Pq By Id", async () => {
  const testHttpClient = createTestHTTPClient("getOutputPqById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.destinations.getDestinationPqById({
    id: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Destinations Get Output Samples By Id", async () => {
  const testHttpClient = createTestHTTPClient("getOutputSamplesById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.destinations.getDestinationSamplesById(
    {
      id: "<id>",
    },
  );
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Destinations Create Output Test By Id", async () => {
  const testHttpClient = createTestHTTPClient("createOutputTestById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.destinations.createDestinationTestById(
    {
      id: "<id>",
      outputTestRequest: {
        events: [
          {
            raw: "<value>",
          },
        ],
      },
    },
  );
  expect(result).toBeDefined();
  expect(result).toEqual({});
});
