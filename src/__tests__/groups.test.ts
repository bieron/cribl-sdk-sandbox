/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { CriblControlPlane } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Groups Get Groups Config Version By Id", async () => {
  const testHttpClient = createTestHTTPClient("getGroupsConfigVersionById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.groups.getGroupsConfigVersionById({
    id: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Groups Create Products Groups By Product", async () => {
  const testHttpClient = createTestHTTPClient("createProductsGroupsByProduct");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.groups.createProductsGroupsByProduct({
    product: "stream",
    configGroup: {
      configVersion: "<value>",
      id: "<id>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Groups Get Products Groups By Product", async () => {
  const testHttpClient = createTestHTTPClient("getProductsGroupsByProduct");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.groups.getProductsGroupsByProduct({
    product: "stream",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Groups Update Groups Deploy By Id", async () => {
  const testHttpClient = createTestHTTPClient("updateGroupsDeployById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.groups.updateGroupsDeployById({
    id: "<id>",
    deployRequest: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Groups Get Groups By Id", async () => {
  const testHttpClient = createTestHTTPClient("getGroupsById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.groups.getGroupsById({
    id: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Groups Get Groups Acl By Id", async () => {
  const testHttpClient = createTestHTTPClient("getGroupsAclById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.groups.getGroupsAclById({
    id: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Groups Delete Groups By Id", async () => {
  const testHttpClient = createTestHTTPClient("deleteGroupsById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.groups.deleteGroupsById({
    id: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Groups Update Groups By Id", async () => {
  const testHttpClient = createTestHTTPClient("updateGroupsById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.groups.updateGroupsById({
    id: "<id>",
    configGroup: {
      configVersion: "<value>",
      id: "<id>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});
