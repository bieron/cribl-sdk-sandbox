/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { destinationsCreateDestination } from "../funcs/destinationsCreateDestination.js";
import { destinationsCreateDestinationTestById } from "../funcs/destinationsCreateDestinationTestById.js";
import { destinationsDeleteDestinationById } from "../funcs/destinationsDeleteDestinationById.js";
import { destinationsDeleteDestinationPqById } from "../funcs/destinationsDeleteDestinationPqById.js";
import { destinationsGetDestinationById } from "../funcs/destinationsGetDestinationById.js";
import { destinationsGetDestinationPqById } from "../funcs/destinationsGetDestinationPqById.js";
import { destinationsGetDestinationSamplesById } from "../funcs/destinationsGetDestinationSamplesById.js";
import { destinationsListDestination } from "../funcs/destinationsListDestination.js";
import { destinationsUpdateDestinationById } from "../funcs/destinationsUpdateDestinationById.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Destinations extends ClientSDK {
  /**
   * Get a list of Destination objects
   *
   * @remarks
   * Get a list of Destination objects
   */
  async listDestination(
    options?: RequestOptions,
  ): Promise<operations.ListOutputResponse> {
    return unwrapAsync(destinationsListDestination(
      this,
      options,
    ));
  }

  /**
   * Create Destination
   *
   * @remarks
   * Create Destination
   */
  async createDestination(
    request: operations.CreateOutputRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateOutputResponse> {
    return unwrapAsync(destinationsCreateDestination(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Destination by ID
   *
   * @remarks
   * Get Destination by ID
   */
  async getDestinationById(
    request: operations.GetOutputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetOutputByIdResponse> {
    return unwrapAsync(destinationsGetDestinationById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Destination
   *
   * @remarks
   * Update Destination
   */
  async updateDestinationById(
    request: operations.UpdateOutputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateOutputByIdResponse> {
    return unwrapAsync(destinationsUpdateDestinationById(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Destination
   *
   * @remarks
   * Delete Destination
   */
  async deleteDestinationById(
    request: operations.DeleteOutputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteOutputByIdResponse> {
    return unwrapAsync(destinationsDeleteDestinationById(
      this,
      request,
      options,
    ));
  }

  /**
   * Clears destination persistent queue
   *
   * @remarks
   * Clears destination persistent queue
   */
  async deleteDestinationPqById(
    request: operations.DeleteOutputPqByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteOutputPqByIdResponse> {
    return unwrapAsync(destinationsDeleteDestinationPqById(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves status of latest clear PQ job for a destination
   *
   * @remarks
   * Retrieves status of latest clear PQ job for a destination
   */
  async getDestinationPqById(
    request: operations.GetOutputPqByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetOutputPqByIdResponse> {
    return unwrapAsync(destinationsGetDestinationPqById(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve samples data for the specified destination. Used to get sample data for the test action.
   *
   * @remarks
   * Retrieve samples data for the specified destination. Used to get sample data for the test action.
   */
  async getDestinationSamplesById(
    request: operations.GetOutputSamplesByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetOutputSamplesByIdResponse> {
    return unwrapAsync(destinationsGetDestinationSamplesById(
      this,
      request,
      options,
    ));
  }

  /**
   * Send sample data to a destination to validate configuration or test connectivity
   *
   * @remarks
   * Send sample data to a destination to validate configuration or test connectivity
   */
  async createDestinationTestById(
    request: operations.CreateOutputTestByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateOutputTestByIdResponse> {
    return unwrapAsync(destinationsCreateDestinationTestById(
      this,
      request,
      options,
    ));
  }
}
