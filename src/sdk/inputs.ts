/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { inputsCreateInput } from "../funcs/inputsCreateInput.js";
import { inputsCreateInputHecTokenById } from "../funcs/inputsCreateInputHecTokenById.js";
import { inputsDeleteInputById } from "../funcs/inputsDeleteInputById.js";
import { inputsGetInputById } from "../funcs/inputsGetInputById.js";
import { inputsListInput } from "../funcs/inputsListInput.js";
import { inputsUpdateInputById } from "../funcs/inputsUpdateInputById.js";
import { inputsUpdateInputHecTokenByIdAndToken } from "../funcs/inputsUpdateInputHecTokenByIdAndToken.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Inputs extends ClientSDK {
  /**
   * Get a list of Input objects
   *
   * @remarks
   * Get a list of Input objects
   */
  async listInput(
    options?: RequestOptions,
  ): Promise<operations.ListInputResponse> {
    return unwrapAsync(inputsListInput(
      this,
      options,
    ));
  }

  /**
   * Create Input
   *
   * @remarks
   * Create Input
   */
  async createInput(
    request: models.Input,
    options?: RequestOptions,
  ): Promise<operations.CreateInputResponse> {
    return unwrapAsync(inputsCreateInput(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Input by ID
   *
   * @remarks
   * Get Input by ID
   */
  async getInputById(
    request: operations.GetInputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetInputByIdResponse> {
    return unwrapAsync(inputsGetInputById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Input
   *
   * @remarks
   * Update Input
   */
  async updateInputById(
    request: operations.UpdateInputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateInputByIdResponse> {
    return unwrapAsync(inputsUpdateInputById(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Input
   *
   * @remarks
   * Delete Input
   */
  async deleteInputById(
    request: operations.DeleteInputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteInputByIdResponse> {
    return unwrapAsync(inputsDeleteInputById(
      this,
      request,
      options,
    ));
  }

  /**
   * Add token and optional metadata to an existing hec input
   *
   * @remarks
   * Add token and optional metadata to an existing hec input
   */
  async createInputHecTokenById(
    request: operations.CreateInputHecTokenByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateInputHecTokenByIdResponse> {
    return unwrapAsync(inputsCreateInputHecTokenById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update token metadata on existing hec input
   *
   * @remarks
   * Update token metadata on existing hec input
   */
  async updateInputHecTokenByIdAndToken(
    request: operations.UpdateInputHecTokenByIdAndTokenRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateInputHecTokenByIdAndTokenResponse> {
    return unwrapAsync(inputsUpdateInputHecTokenByIdAndToken(
      this,
      request,
      options,
    ));
  }
}
