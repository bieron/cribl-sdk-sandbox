/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { outputsCreateOutput } from "../funcs/outputsCreateOutput.js";
import { outputsCreateOutputTestById } from "../funcs/outputsCreateOutputTestById.js";
import { outputsDeleteOutputById } from "../funcs/outputsDeleteOutputById.js";
import { outputsDeleteOutputPqById } from "../funcs/outputsDeleteOutputPqById.js";
import { outputsGetOutputById } from "../funcs/outputsGetOutputById.js";
import { outputsGetOutputPqById } from "../funcs/outputsGetOutputPqById.js";
import { outputsGetOutputSamplesById } from "../funcs/outputsGetOutputSamplesById.js";
import { outputsListOutput } from "../funcs/outputsListOutput.js";
import { outputsUpdateOutputById } from "../funcs/outputsUpdateOutputById.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Outputs extends ClientSDK {
  /**
   * Get a list of Output objects
   *
   * @remarks
   * Get a list of Output objects
   */
  async listOutput(
    options?: RequestOptions,
  ): Promise<operations.ListOutputResponse> {
    return unwrapAsync(outputsListOutput(
      this,
      options,
    ));
  }

  /**
   * Create Output
   *
   * @remarks
   * Create Output
   */
  async createOutput(
    request: models.Output,
    options?: RequestOptions,
  ): Promise<operations.CreateOutputResponse> {
    return unwrapAsync(outputsCreateOutput(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Output by ID
   *
   * @remarks
   * Get Output by ID
   */
  async getOutputById(
    request: operations.GetOutputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetOutputByIdResponse> {
    return unwrapAsync(outputsGetOutputById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Output
   *
   * @remarks
   * Update Output
   */
  async updateOutputById(
    request: operations.UpdateOutputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateOutputByIdResponse> {
    return unwrapAsync(outputsUpdateOutputById(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Output
   *
   * @remarks
   * Delete Output
   */
  async deleteOutputById(
    request: operations.DeleteOutputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteOutputByIdResponse> {
    return unwrapAsync(outputsDeleteOutputById(
      this,
      request,
      options,
    ));
  }

  /**
   * Clears destination persistent queue
   *
   * @remarks
   * Clears destination persistent queue
   */
  async deleteOutputPqById(
    request: operations.DeleteOutputPqByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteOutputPqByIdResponse> {
    return unwrapAsync(outputsDeleteOutputPqById(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves status of latest clear PQ job for an output
   *
   * @remarks
   * Retrieves status of latest clear PQ job for an output
   */
  async getOutputPqById(
    request: operations.GetOutputPqByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetOutputPqByIdResponse> {
    return unwrapAsync(outputsGetOutputPqById(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve samples data for the specified output. Used to get sample data for the test action.
   *
   * @remarks
   * Retrieve samples data for the specified output. Used to get sample data for the test action.
   */
  async getOutputSamplesById(
    request: operations.GetOutputSamplesByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetOutputSamplesByIdResponse> {
    return unwrapAsync(outputsGetOutputSamplesById(
      this,
      request,
      options,
    ));
  }

  /**
   * Send sample data to an output to validate configuration or test connectivity
   *
   * @remarks
   * Send sample data to an output to validate configuration or test connectivity
   */
  async createOutputTestById(
    request: operations.CreateOutputTestByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateOutputTestByIdResponse> {
    return unwrapAsync(outputsCreateOutputTestById(
      this,
      request,
      options,
    ));
  }
}
