/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { sourcesCreateSource } from "../funcs/sourcesCreateSource.js";
import { sourcesCreateSourceHecTokenById } from "../funcs/sourcesCreateSourceHecTokenById.js";
import { sourcesDeleteSourceById } from "../funcs/sourcesDeleteSourceById.js";
import { sourcesGetSourceById } from "../funcs/sourcesGetSourceById.js";
import { sourcesListSource } from "../funcs/sourcesListSource.js";
import { sourcesUpdateSourceById } from "../funcs/sourcesUpdateSourceById.js";
import { sourcesUpdateSourceHecTokenByIdAndToken } from "../funcs/sourcesUpdateSourceHecTokenByIdAndToken.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Sources extends ClientSDK {
  /**
   * Get a list of Source objects
   *
   * @remarks
   * Get a list of Source objects
   */
  async listSource(
    options?: RequestOptions,
  ): Promise<operations.ListInputResponse> {
    return unwrapAsync(sourcesListSource(
      this,
      options,
    ));
  }

  /**
   * Create Source
   *
   * @remarks
   * Create Source
   */
  async createSource(
    request: models.Input,
    options?: RequestOptions,
  ): Promise<operations.CreateInputResponse> {
    return unwrapAsync(sourcesCreateSource(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Source by ID
   *
   * @remarks
   * Get Source by ID
   */
  async getSourceById(
    request: operations.GetInputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetInputByIdResponse> {
    return unwrapAsync(sourcesGetSourceById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Source
   *
   * @remarks
   * Update Source
   */
  async updateSourceById(
    request: operations.UpdateInputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateInputByIdResponse> {
    return unwrapAsync(sourcesUpdateSourceById(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Source
   *
   * @remarks
   * Delete Source
   */
  async deleteSourceById(
    request: operations.DeleteInputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteInputByIdResponse> {
    return unwrapAsync(sourcesDeleteSourceById(
      this,
      request,
      options,
    ));
  }

  /**
   * Add token and optional metadata to an existing HEC Source
   *
   * @remarks
   * Add token and optional metadata to an existing HEC Source
   */
  async createSourceHecTokenById(
    request: operations.CreateInputHecTokenByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateInputHecTokenByIdResponse> {
    return unwrapAsync(sourcesCreateSourceHecTokenById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update token metadata on existing HEC Source
   *
   * @remarks
   * Update token metadata on existing HEC Source
   */
  async updateSourceHecTokenByIdAndToken(
    request: operations.UpdateInputHecTokenByIdAndTokenRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateInputHecTokenByIdAndTokenResponse> {
    return unwrapAsync(sourcesUpdateSourceHecTokenByIdAndToken(
      this,
      request,
      options,
    ));
  }
}
