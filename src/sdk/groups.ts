/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { groupsCreateProductsGroupsByProduct } from "../funcs/groupsCreateProductsGroupsByProduct.js";
import { groupsDeleteGroupsById } from "../funcs/groupsDeleteGroupsById.js";
import { groupsGetGroupsAclById } from "../funcs/groupsGetGroupsAclById.js";
import { groupsGetGroupsById } from "../funcs/groupsGetGroupsById.js";
import { groupsGetGroupsConfigVersionById } from "../funcs/groupsGetGroupsConfigVersionById.js";
import { groupsGetProductsGroupsByProduct } from "../funcs/groupsGetProductsGroupsByProduct.js";
import { groupsUpdateGroupsById } from "../funcs/groupsUpdateGroupsById.js";
import { groupsUpdateGroupsDeployById } from "../funcs/groupsUpdateGroupsDeployById.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Groups extends ClientSDK {
  /**
   * Get effective bundle version for given Group
   *
   * @remarks
   * Get effective bundle version for given Group
   */
  async getGroupsConfigVersionById(
    request: operations.GetGroupsConfigVersionByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetGroupsConfigVersionByIdResponse> {
    return unwrapAsync(groupsGetGroupsConfigVersionById(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a Fleet or Worker Group
   *
   * @remarks
   * Create a Fleet or Worker Group
   */
  async createProductsGroupsByProduct(
    request: operations.CreateProductsGroupsByProductRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateProductsGroupsByProductResponse> {
    return unwrapAsync(groupsCreateProductsGroupsByProduct(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a list of ConfigGroup objects
   *
   * @remarks
   * Get a list of ConfigGroup objects
   */
  async getProductsGroupsByProduct(
    request: operations.GetProductsGroupsByProductRequest,
    options?: RequestOptions,
  ): Promise<operations.GetProductsGroupsByProductResponse> {
    return unwrapAsync(groupsGetProductsGroupsByProduct(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Fleet or Worker Group
   *
   * @remarks
   * Delete a Fleet or Worker Group
   */
  async deleteGroupsById(
    request: operations.DeleteGroupsByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteGroupsByIdResponse> {
    return unwrapAsync(groupsDeleteGroupsById(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific ConfigGroup object
   *
   * @remarks
   * Get a specific ConfigGroup object
   */
  async getGroupsById(
    request: operations.GetGroupsByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetGroupsByIdResponse> {
    return unwrapAsync(groupsGetGroupsById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Fleet or Worker Group
   *
   * @remarks
   * Update a Fleet or Worker Group
   */
  async updateGroupsById(
    request: operations.UpdateGroupsByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateGroupsByIdResponse> {
    return unwrapAsync(groupsUpdateGroupsById(
      this,
      request,
      options,
    ));
  }

  /**
   * Deploy commits for a Fleet or Worker Group
   *
   * @remarks
   * Deploy commits for a Fleet or Worker Group
   */
  async updateGroupsDeployById(
    request: operations.UpdateGroupsDeployByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateGroupsDeployByIdResponse> {
    return unwrapAsync(groupsUpdateGroupsDeployById(
      this,
      request,
      options,
    ));
  }

  /**
   * ACL of members with permissions for resources in this Group
   *
   * @remarks
   * ACL of members with permissions for resources in this Group
   */
  async getGroupsAclById(
    request: operations.GetGroupsAclByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetGroupsAclByIdResponse> {
    return unwrapAsync(groupsGetGroupsAclById(
      this,
      request,
      options,
    ));
  }
}
